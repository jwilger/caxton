name: Deploy Website to GitHub Pages

on:
  # Automatic deployment on release
  release:
    types: [published]
  
  # Manual deployment option
  workflow_dispatch:
    inputs:
      deploy_preview:
        description: 'Deploy a preview version'
        type: boolean
        default: false
      reason:
        description: 'Reason for manual deployment'
        required: false

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for git info

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Install Pandoc
        uses: nikeee/setup-pandoc@v1

      - name: Build Documentation
        run: |
          # Build rustdoc
          cargo doc --no-deps --all-features
          
          # Copy rustdoc to site
          mkdir -p _site
          cp -r target/doc/* _site/
          
          # Build ADRs as HTML using pandoc
          mkdir -p _site/adr
          
          # Copy the template to working directory for pandoc
          cp docs/site/adr-template.html ./adr-template.html
          
          # Process each ADR markdown file
          for adr in docs/adr/*.md; do
            if [ -f "$adr" ]; then
              filename=$(basename "$adr" .md)
              # Extract title from the first line of the file
              title=$(head -n1 "$adr" | sed 's/^# //')
              # Use pandoc to convert with our custom template
              pandoc "$adr" \
                --standalone \
                --template=./adr-template.html \
                --metadata title="$title" \
                --to=html5 \
                -o "_site/adr/${filename}.html"
            fi
          done

      - name: Build Website
        run: |
          # Copy static files (preserving rustdoc)
          cp -r docs/site/* _site/
          
          # Copy the template again for the index generation
          cp docs/site/adr-template.html ./adr-template.html
          
          # Generate ADR index page dynamically
          cat > _site/adr/index.md << 'EOF'
          # Architecture Decision Records
          
          This project uses Architecture Decision Records (ADRs) to document all significant architectural decisions. ADRs help future developers understand not just what decisions were made, but why they were made and what alternatives were considered.
          
          ## Active ADRs
          
          EOF
          
          # Add each ADR to the index with data attributes for carousel
          for adr in docs/adr/*.md; do
            if [ -f "$adr" ]; then
              filename=$(basename "$adr" .md)
              # Extract ADR number and title
              title=$(head -n1 "$adr" | sed 's/^# //')
              # Extract the first paragraph as description
              description=$(awk '/^## Context/ {p=1; next} /^##/ {p=0} p && /[^[:space:]]/' "$adr" | head -n3 | tr '\n' ' ' | sed 's/  */ /g' | sed 's/[[:space:]]*$//')
              if [ -z "$description" ]; then
                description=$(awk '/^[^#]/ && /[^[:space:]]/' "$adr" | head -n1)
              fi
              # Truncate description to ~150 chars at word boundary
              description=$(echo "$description" | cut -c1-150 | sed 's/\(.*\) .*/\1/')
              echo "- [**${title}**](./${filename}.html) - ${description}..." >> _site/adr/index.md
              echo "" >> _site/adr/index.md
            fi
          done
          
          # Convert the markdown index to HTML using pandoc
          echo "Converting ADR index with pandoc..."
          ls -la ./adr-template.html || echo "Template file not found!"
          pandoc _site/adr/index.md \
            --standalone \
            --template=./adr-template.html \
            --metadata title="Architecture Decision Records" \
            --to=html5 \
            -o _site/adr/index.html
          
          # Verify the output
          echo "Checking if carousel script is in the generated index..."
          grep -q "adr-carousel.js" _site/adr/index.html && echo "✓ Carousel script found!" || echo "✗ Carousel script NOT found!"
          
          # Clean up the temporary markdown file
          rm _site/adr/index.md
          rm ./adr-template.html

      - name: Generate Release Info
        if: github.event_name == 'release'
        run: |
          # Extract release notes and generate JSON
          cat > _site/release-info.json << EOF
          {
            "version": "${{ github.event.release.tag_name }}",
            "date": "${{ github.event.release.published_at }}",
            "name": "${{ github.event.release.name }}",
            "notes": $(jq -Rs . <<< "${{ github.event.release.body }}")
          }
          EOF

      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4