# ============================================================================
# RELEASE-PLZ WORKFLOW
# ============================================================================
# Automated release management with comprehensive security validation
#
# This workflow manages the complete release lifecycle including:
# - Security gate validation for all triggers
# - Automated release creation and publishing
# - Release PR generation for manual review
# - Dry run validation for testing
#
# Key Features:
# - Multi-trigger support (manual, push, workflow_run)
# - Simplified security dependency chain (all triggers approved)
# - Comprehensive logging and status reporting
# - Concurrent release prevention
# ============================================================================

name: Release-plz

# ============================================================================
# PERMISSIONS
# ============================================================================
# Security-first permissions - minimize scope to essential operations
permissions:
  contents: write        # Required for creating releases and updating repository
  pull-requests: write   # Required for creating and managing release PRs
  actions: read         # Required for reading workflow status
  checks: read          # Required for reading security check results

# ============================================================================
# TRIGGERS
# ============================================================================
# Multi-trigger support with unified security validation
on:
  # Manual release trigger (preferred for production)
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release to create'
        required: true
        default: 'auto'
        type: choice
        options:
          - auto
          - patch
          - minor
          - major
      dry_run:
        description: 'Perform dry run without actual release'
        required: false
        default: false
        type: boolean

  # Automated trigger on main branch changes
  push:
    branches:
      - main
    paths:
      # Only trigger on actual code changes, not documentation
      - 'src/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - '.github/workflows/release-plz.yml'

  # Security workflow completion trigger
  workflow_run:
    workflows: ["Security Monitoring"]
    types: [completed]
    branches: [main]

# ============================================================================
# ENVIRONMENT VARIABLES
# ============================================================================
# Global environment configuration for consistent behavior across all jobs
env:
  CARGO_TERM_COLOR: always    # Enable colored output for better readability
  CARGO_INCREMENTAL: 0         # Disable incremental compilation for CI consistency
  RUST_BACKTRACE: 1           # Enable backtraces for better debugging

# ============================================================================
# JOBS
# ============================================================================

jobs:
  # ============================================================================
  # SECURITY GATE JOB
  # ============================================================================
  # Unified security validation for all workflow triggers
  # NOTE: Simplified in response to dependency management complexity
  security-gate:
    name: Security Gate
    runs-on: ubuntu-latest
    outputs:
      security-passed: ${{ steps.validate.outputs.passed }}
      workflow-trigger: ${{ steps.validate.outputs.trigger }}
    steps:
      - name: Validate security status
        id: validate
        run: |
          echo "::group::Security Gate Validation"
          echo "Event: ${{ github.event_name }}"

          # SECURITY VALIDATION LOGIC:
          # Validates security status based on trigger type while maintaining
          # simplified dependency structure to prevent circular dependencies

          SECURITY_PASSED="false"

          case "${{ github.event_name }}" in
            "workflow_dispatch")
              echo "Manual trigger - performing basic security validation"
              # Manual triggers require manual approval, inherently more secure
              SECURITY_PASSED="true"
              ;;
            "push")
              echo "Push trigger - validating repository security state"
              # For push triggers, validate that we're on main branch and repo is secure
              if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
                echo "‚úÖ Push to main branch confirmed"
                SECURITY_PASSED="true"
              else
                echo "‚ùå Push trigger only allowed on main branch"
                SECURITY_PASSED="false"
              fi
              ;;
            "workflow_run")
              echo "Security workflow completion trigger - validating workflow status"
              # For workflow_run triggers, validate the security workflow actually succeeded
              if [[ "${{ github.event.workflow_run.conclusion }}" == "success" ]]; then
                echo "‚úÖ Security workflow completed successfully"
                SECURITY_PASSED="true"
              else
                echo "‚ùå Security workflow failed: ${{ github.event.workflow_run.conclusion }}"
                SECURITY_PASSED="false"
              fi
              ;;
            *)
              echo "‚ùå Unknown trigger type: ${{ github.event_name }}"
              SECURITY_PASSED="false"
              ;;
          esac

          if [[ "$SECURITY_PASSED" == "true" ]]; then
            echo "‚úÖ Security gate passed for: ${{ github.event_name }}"
          else
            echo "‚ùå Security gate failed for: ${{ github.event_name }}"
            exit 1
          fi

          echo "passed=$SECURITY_PASSED" >> $GITHUB_OUTPUT
          echo "trigger=${{ github.event_name }}" >> $GITHUB_OUTPUT
          echo "::endgroup::"

  # ============================================================================
  # RELEASE EXECUTION JOB
  # ============================================================================
  # Main release job that creates and publishes releases
  release-plz-release:
    name: Release-plz Release
    runs-on: ubuntu-latest
    needs: security-gate
    # Simple dependency - security gate must pass
    if: needs.security-gate.outputs.security-passed == 'true'

    # Job-level permissions (principle of least privilege)
    permissions:
      contents: write    # Required for creating releases
      actions: read     # Required for reading workflow status

    # Prevent concurrent releases to avoid conflicts
    concurrency:
      group: release-plz-release
      cancel-in-progress: false

    # Enhanced timeout for large repositories
    timeout-minutes: 30

    steps:
      - name: üîç Security Context Logging
        run: |
          echo "::group::Release Security Context"
          echo "Event: ${{ github.event_name }}"
          echo "Actor: ${{ github.actor }}"
          echo "Repository: ${{ github.repository }}"
          echo "Ref: ${{ github.ref }}"
          echo "SHA: ${{ github.sha }}"
          echo "Dry run: ${{ inputs.dry_run || 'false' }}"
          echo "Release type: ${{ inputs.release_type || 'auto' }}"

          if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            echo "Triggering workflow: ${{ github.event.workflow_run.name }}"
            echo "Triggering SHA: ${{ github.event.workflow_run.head_sha }}"
          fi
          echo "::endgroup::"

      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          # Full history for semantic versioning
          fetch-depth: 0
          # Use dedicated release token with minimal scope
          token: ${{ secrets.RELEASE_PLZ_TOKEN || secrets.GITHUB_TOKEN }}

      - name: ü¶Ä Install Rust Toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          # Components needed for release validation
          components: rustfmt, clippy

      - name: üîê Validate Release Environment
        run: |
          echo "::group::Release Environment Validation"

          # Check required secrets
          if [[ -z "${{ secrets.CARGO_REGISTRY_TOKEN }}" ]]; then
            echo "::warning::CARGO_REGISTRY_TOKEN not set - releases will fail"
          else
            echo "‚úÖ CARGO_REGISTRY_TOKEN is configured"
          fi

          # Validate repository state
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "::error::Repository has uncommitted changes"
            git status
            exit 1
          fi

          echo "‚úÖ Repository state is clean"
          echo "Current commit: $(git rev-parse HEAD)"
          echo "::endgroup::"

      - name: üöÄ Execute Release
        uses: release-plz/action@v0.5
        with:
          command: release
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_PLZ_TOKEN || secrets.GITHUB_TOKEN }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
          # Enhanced logging for debugging
          RUST_LOG: debug

      - name: üìä Release Status Report
        if: always()
        run: |
          echo "::group::Release Status Report"
          echo "Release job completed with status: ${{ job.status }}"
          echo "Triggered by: ${{ github.event_name }}"

          if [[ "${{ job.status }}" == "success" ]]; then
            echo "‚úÖ Release completed successfully"
          else
            echo "‚ùå Release failed - check logs above"
          fi
          echo "::endgroup::"

  # ============================================================================
  # RELEASE PR JOB
  # ============================================================================
  # Creates release PRs for manual review and approval
  release-plz-pr:
    name: Release-plz PR
    runs-on: ubuntu-latest
    needs: security-gate
    # Simple dependency with dry run exclusion
    if: needs.security-gate.outputs.security-passed == 'true' && inputs.dry_run != true

    # Job-level permissions for PR operations
    permissions:
      contents: write       # Required for accessing repository content
      pull-requests: write  # Required for creating and managing PRs
      actions: read        # Required for reading workflow status

    # Prevent concurrent PR operations on the same branch
    concurrency:
      group: release-plz-pr-${{ github.ref }}
      cancel-in-progress: false

    # Reasonable timeout for PR operations
    timeout-minutes: 15

    steps:
      - name: üîç PR Context Logging
        run: |
          echo "::group::PR Generation Context"
          echo "Event: ${{ github.event_name }}"
          echo "Security gate: ${{ needs.security-gate.outputs.security-passed }}"
          echo "Trigger: ${{ needs.security-gate.outputs.workflow-trigger }}"
          echo "::endgroup::"

      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_PLZ_TOKEN || secrets.GITHUB_TOKEN }}

      - name: ü¶Ä Install Rust Toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: üîç Pre-PR Validation
        run: |
          echo "::group::Pre-PR Validation"

          # Check for existing release PRs
          existing_prs=$(gh pr list --state open --label "release" --json number,title | jq length)
          if [[ $existing_prs -gt 0 ]]; then
            echo "::warning::Found $existing_prs existing release PR(s)"
            gh pr list --state open --label "release" --json number,title,url | jq -r '.[] | "PR #\(.number): \(.title) - \(.url)"'
          else
            echo "‚úÖ No existing release PRs found"
          fi

          echo "Repository state validation:"
          git status --porcelain
          echo "::endgroup::"
        env:
          GH_TOKEN: ${{ secrets.RELEASE_PLZ_TOKEN || secrets.GITHUB_TOKEN }}

      - name: üìù Generate Release PR
        uses: release-plz/action@v0.5
        with:
          command: release-pr
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_PLZ_TOKEN || secrets.GITHUB_TOKEN }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
          RUST_LOG: debug

      - name: üìä PR Status Report
        if: always()
        run: |
          echo "::group::PR Generation Status"
          echo "PR job completed with status: ${{ job.status }}"

          if [[ "${{ job.status }}" == "success" ]]; then
            echo "‚úÖ Release PR generation completed"
            # List any new release PRs
            gh pr list --state open --label "release" --json number,title,url | jq -r '.[] | "Created PR #\(.number): \(.title) - \(.url)"'
          else
            echo "‚ùå PR generation failed - check logs above"
          fi
          echo "::endgroup::"
        env:
          GH_TOKEN: ${{ secrets.RELEASE_PLZ_TOKEN || secrets.GITHUB_TOKEN }}

  # ============================================================================
  # DRY RUN VALIDATION JOB
  # ============================================================================
  # Validates release readiness without performing actual release operations
  dry-run-validation:
    name: Dry Run Validation
    runs-on: ubuntu-latest
    needs: security-gate
    if: |
      needs.security-gate.outputs.security-passed == 'true' &&
      github.event_name == 'workflow_dispatch' &&
      inputs.dry_run == true

    # Read-only permissions for dry run validation
    permissions:
      contents: read    # Required for accessing repository content
      actions: read    # Required for reading workflow status

    # Short timeout for validation-only operations
    timeout-minutes: 10

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: ü¶Ä Install Rust Toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: üß™ Dry Run Release Check
        run: |
          echo "::group::Dry Run Release Validation"
          echo "This is a dry run - no actual release will be performed"

          # Simulate release-plz checks
          echo "Checking for releasable changes..."

          # Check if there are changes since last release
          if git describe --tags --abbrev=0 >/dev/null 2>&1; then
            last_tag=$(git describe --tags --abbrev=0)
            echo "Last release: $last_tag"

            # Check for commits since last tag
            commit_count=$(git rev-list --count $last_tag..HEAD)
            if [[ $commit_count -gt 0 ]]; then
              echo "‚úÖ Found $commit_count commit(s) since last release"
              git log --oneline $last_tag..HEAD
            else
              echo "‚ÑπÔ∏è No new commits since last release"
            fi
          else
            echo "‚ÑπÔ∏è No previous releases found"
          fi

          echo "‚úÖ Dry run validation completed"
          echo "::endgroup::"
