name: "Code Quality Gate"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-D warnings"

jobs:
  quality-gate:
    name: Code Quality Enforcement
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        toolchain: [stable]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: ${{ matrix.toolchain }}
        components: clippy, rustfmt

    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-${{ matrix.toolchain }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.toolchain }}-cargo-

    - name: Install cargo-nextest
      uses: taiki-e/install-action@v2
      with:
        tool: nextest

    - name: Install cargo-audit (stable toolchain only)
      if: matrix.toolchain == 'stable'
      uses: taiki-e/install-action@v2
      with:
        tool: cargo-audit

    - name: Check code formatting
      run: cargo fmt --all -- --check

    - name: Run Clippy (treat warnings as errors)
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build project
      run: cargo build --verbose

    - name: Run code quality audit tests
      run: cargo nextest run test_no_clippy_allow_attributes --nocapture

    - name: Run all tests
      run: cargo nextest run --nocapture

    - name: Security audit (stable toolchain only)
      if: matrix.toolchain == 'stable'
      run: cargo audit

    - name: Validate documentation (stable toolchain only)
      if: matrix.toolchain == 'stable'
      run: cargo doc --no-deps --document-private-items
