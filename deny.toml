# Caxton Multi-Agent Orchestration Server - Cargo Deny Configuration
#
# This configuration enforces security, licensing, and dependency policies
# for Caxton's WebAssembly-based multi-agent runtime environment.
#
# Caxton Architecture Context:
# - WebAssembly agent sandboxing with wasmtime runtime
# - FIPA-compliant async messaging between agents
# - Resource management (CPU fuel, memory limits)
# - Observability layer (tracing, metrics, distributed tracing)
# - Agent lifecycle management with deployment strategies
#
# Security Philosophy: "Secure by default, fail fast on policy violations"

# =============================================================================
# SECURITY ADVISORIES CONFIGURATION
# =============================================================================
[advisories]
# Advisory database configuration for vulnerability detection
# Caxton runs untrusted WebAssembly code, so we take a zero-tolerance
# approach to known vulnerabilities in our runtime dependencies
db-path = "~/.cargo/advisory-db"
db-urls = ["https://github.com/rustsec/advisory-db"]

# Security policy: Deny ALL vulnerabilities in runtime dependencies
# Rationale: Any vulnerability in our runtime could be exploited by
# malicious WASM agents to escape sandboxing or access unauthorized resources
#
# EXCEPTION HANDLING PROCESS:
# While we maintain a zero-tolerance policy for vulnerabilities, we recognize
# that false positives and unavoidable dependencies may require exceptions.
#
# Process for handling vulnerability exceptions:
# 1. IMMEDIATE ACTION: If a vulnerability blocks development/deployment:
#    - Create GitHub issue with title: "Security Exception: [RUSTSEC-YYYY-NNNN] Brief Description"
#    - Label with: "security-exception", "urgent"
#    - Document: vulnerability details, impact assessment, mitigation strategies
#
# 2. FALSE POSITIVE PROCESS:
#    - Verify the vulnerability doesn't apply to our usage pattern
#    - Document why it's a false positive (version mismatch, unused code path, etc.)
#    - Add to ignore list below with issue reference and expiration date
#    - Example: "RUSTSEC-2023-0001", # False positive: only affects unused feature X, expires 2024-06-01, see issue #123
#
# 3. UNAVOIDABLE VULNERABILITY PROCESS:
#    - Assess if vulnerability affects Caxton's security model
#    - Document compensating controls (sandboxing, input validation, etc.)
#    - Create remediation plan with timeline
#    - Add temporary exception with mandatory expiration date
#    - Schedule regular review (monthly for high severity, quarterly for medium/low)
#
# 4. GITHUB ISSUE TRACKING:
#    - All exceptions MUST have corresponding GitHub issues
#    - Use template: .github/ISSUE_TEMPLATE/security-exception.md
#    - Issues must include: CVSS score, exploitability assessment, Caxton-specific impact
#    - Tag security team for review (@security-team)
#    - Link to any vendor advisories or upstream fixes
#
# 5. REVIEW AND EXPIRATION:
#    - All exceptions have mandatory expiration dates (max 6 months)
#    - Monthly security review of all active exceptions
#    - Automatic CI warnings 30 days before expiration
#    - No exceptions without explicit re-approval after expiration
#
vulnerability = "deny"

# Warn about unmaintained dependencies but don't fail builds
# Rationale: Some low-level WASM/crypto dependencies may appear unmaintained
# but are stable and security-audited. Manual review required.
unmaintained = "warn"

# Warn about yanked crates but don't fail builds
# Rationale: Yanked crates may still be safe to use temporarily while
# we evaluate alternatives, especially for development dependencies
yanked = "warn"

# Notice-level advisories (informational security notices)
# These provide early warning about potential future issues
notice = "warn"

# Currently no ignored advisories
# Any ignored vulnerabilities must be documented with business justification
# and linked to tracking issues for remediation
#
# IGNORE LIST DOCUMENTATION REQUIREMENTS:
# When adding exceptions to this list, each entry MUST include:
# - RUSTSEC ID and brief description
# - GitHub issue reference
# - Expiration date (mandatory, max 6 months from addition)
# - Reason for exception (false positive, unavoidable, compensating controls)
# - Security team approval reference
#
# Format examples:
# ignore = [
#     "RUSTSEC-2023-0001", # False positive: affects unused tokio feature, expires 2024-06-01, see issue #123
#     "RUSTSEC-2023-0002", # Unavoidable: wasmtime dependency, sandboxing mitigates risk, expires 2024-08-01, see issue #124
#     "RUSTSEC-2023-0003", # Low severity: dev dependency only, no runtime impact, expires 2024-07-01, see issue #125
# ]
#
# AUTOMATIC EXPIRATION ENFORCEMENT:
# CI will automatically fail if:
# - Any ignored advisory lacks required documentation
# - Any advisory exceeds its expiration date
# - Any advisory is added without corresponding GitHub issue
ignore = []

# =============================================================================
# LICENSE COMPLIANCE CONFIGURATION
# =============================================================================
[licenses]
# License policy for multi-agent orchestration server
# Must be compatible with MIT OR Apache-2.0 dual licensing

# Deny crates without license information
# Rationale: License compliance is critical for enterprise deployments
# of multi-agent systems
unlicensed = "deny"

# Approved licenses for Caxton dependencies
# Selected for compatibility with MIT/Apache-2.0 and enterprise use
allow = [
  # Primary permissive licenses
  "MIT",                            # MIT License - most common, fully compatible
  "Apache-2.0",                     # Apache 2.0 - our primary license
  "Apache-2.0 WITH LLVM-exception", # LLVM exception for WASM toolchain

  # BSD family - permissive and compatible
  "BSD-2-Clause", # Simplified BSD License
  "BSD-3-Clause", # New BSD License

  # Other permissive licenses
  "ISC",              # Internet Systems Consortium License
  "Unicode-DFS-2016", # Unicode Data Files and Software License

  # Note: Additional licenses may be needed for:
  # - WebAssembly runtime dependencies (wasmtime ecosystem)
  # - Cryptographic libraries (if we add TLS/crypto features)
  # - Observability stack (OpenTelemetry, Prometheus)
]

# No explicitly denied licenses currently
# Future consideration: May need to deny GPL family for enterprise deployments
deny = []

# Warn about copyleft licenses requiring careful review
# Rationale: Copyleft licenses may impose additional obligations
# for derivative works of the multi-agent server
copyleft = "warn"

# Don't automatically allow OSI/FSF licenses without explicit approval
# Rationale: Some OSI/FSF licenses may have enterprise compatibility issues
allow-osi-fsf-free = "neither"

# Default policy: deny unknown licenses
# All licenses must be explicitly approved for Caxton use
default = "deny"

# License detection confidence threshold
# Higher values reduce false positives in license detection
confidence-threshold = 0.8

# =============================================================================
# DEPENDENCY BANS CONFIGURATION
# =============================================================================
[bans]
# Multiple versions policy for multi-agent runtime
multiple-versions = "deny"

# Allow wildcard dependencies in development
# Rationale: Development tools may use wildcards, but production
# dependencies should have explicit version constraints
wildcards = "deny"

# Highlight all duplicate dependencies for review
# Helps identify optimization opportunities in the dependency graph
highlight = "all"

# Workspace default features policy
# Allow workspace members to use default features for development
workspace-default-features = "allow"

# External default features policy
external-default-features = "deny"

# Skip checking MySQL-related crates that appear in Cargo.lock due to SQLx weak features bug
# These crates are NOT actually compiled (verified with `cargo tree | grep mysql` showing no output)
# This is a known Cargo bug: https://github.com/launchbadge/sqlx/issues/3211
# and https://github.com/rust-lang/cargo/issues/10801
#
# The SQLx `migrate` feature incorrectly causes mysql dependencies to appear in Cargo.lock
# even when only using SQLite. This is a false positive that cannot be fixed without
# removing the `migrate` feature, which we need for database migrations.
skip = [
  { name = "sqlx-mysql", version = "*" },          # False positive from SQLx weak features
  { name = "mysql_common", version = "*" },        # Transitive dependency of sqlx-mysql
  { name = "mysql-common-derive", version = "*" }, # Transitive dependency of sqlx-mysql
]

# No banned dependency trees currently
# May be used to exclude entire ecosystems that conflict with
# WebAssembly sandboxing or multi-agent messaging requirements
skip-tree = []

# =============================================================================
# SOURCE REGISTRY CONFIGURATION
# =============================================================================
[sources]
# Package source validation for supply chain security
# Critical for multi-agent systems handling untrusted code

# Rationale: Unknown registries may not have the same security
# review processes as crates.io
unknown-registry = "deny"

# Warn about packages from unknown git sources
# Rationale: Git dependencies bypass crates.io security review
# and may introduce supply chain vulnerabilities
unknown-git = "deny"

# Approved registries for Caxton dependencies
# Currently limited to the official Rust package registry
allow-registry = ["https://github.com/rust-lang/crates.io-index"]

# No approved git sources currently
# Future consideration: May need to allow specific git sources for:
# - WebAssembly toolchain components
# - Experimental FIPA protocol implementations
# - Research-stage multi-agent system libraries
allow-git = []
